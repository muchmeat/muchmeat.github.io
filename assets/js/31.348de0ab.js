(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{317:function(t,a,s){"use strict";s.r(a);var e=s(14),r=Object(e.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h1",{attrs:{id:"上下文切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[this._v("#")]),this._v(" 上下文切换")]),this._v(" "),t("p",[this._v("上下文切换是多线程编程中一个很重要的概念，可以别看做多个线程共享同一个处理器的产物。一个处理器可以在同一时间段内运行多个线程，就像大家在一起打篮球，每个队员在打球时可能会持球进攻一段时间，传球或被抢断，这时篮球就交给另外一个球员了。按照这种规则，大家轮流打球。这里，每个球员拿到球的时间就被称为时间片，当然这里有一点不准确，这个时间片我们认为是长度一致的。处理器上的多线程就是通过时间片分配的方式实现的。时间片决定了一个线程可以占用处理器的运行时间长度。当一个线程由于时间片用完或者自身原因被迫或者主动暂停其运行时，另外一个线程可以被线程调度器调用开始运行。这种一个线程被暂停，另外一个线程被选中开始运行的过程就叫做上下文切换。上下文切换按照因素划分可以分为自发性上下文切换和非自发性上下文切换。自发性切换在java中可以通过Thread.sleep、Object.wait、Thread.yield、Thread.join、LockSupport.park去产生。非自发性上线文切换是指线程由于线程调度器的原因被迫切出，在java虚拟机垃圾回收时可能需要暂停所有线程才能完成回收，比如主要回收过程中，GC需要对虚拟机内存区域进行整理，这时需要停止所有应用线程。上下文切换是有开销的，可以分为直接开销和间接开销，线程数量越多，可能导致的上下文切换开销就越大，所以在设计多线程程序时，减少上下文切换时很有必要的")])])}),[],!1,null,null,null);a.default=r.exports}}]);