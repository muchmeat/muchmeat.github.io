(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{331:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"synchronized-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字"}},[s._v("#")]),s._v(" synchronized 关键字")]),s._v(" "),a("p",[s._v("内部锁是是通过 synchronized 关键字实现的。它所修饰的方法被称为同步方法，修饰的静态方法被称为同步静态方法，修饰的实例方法被称为同步实例方法。同步方法的整个方法体就是一个临界区。")]),s._v(" "),a("p",[s._v("synchronized 关键字修饰的代码块被称为同步块，语法如下")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("synchronized (锁句柄) {\n    //访问共享数据\n}\n")])])]),a("p",[s._v("作为锁句柄的变量通常使用final修饰。因为锁句柄变量的值一旦改变，会导致执行同一个代码块的多个线程实际上使用不同的锁，从而导致竞态")]),s._v(" "),a("p",[s._v("同步静态方法相当于以当前类对象为引导锁的同步块")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Example {\n    public static synchronized void a() {\n        //访问共享数据\n    }\n}\n")])])]),a("p",[s._v("相当于：")]),s._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("public class Example{\n    public static void a() {\n        synchronized(Example.class) {\n            //访问共享数据\n        }\n    }\n}\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);