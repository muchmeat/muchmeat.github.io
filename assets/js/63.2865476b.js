(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{369:function(t,n,a){"use strict";a.r(n);var e=a(14),o=Object(e.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[this._v("2023年9月10日 陈志全\n学习思考日志：多线程在文件导出功能中的应用\n在最近的工作中，客户反应一个数据导出功能耗时较久，用户体验不太好。故思考如何优化该功能，然后寻求到了多线程的解决方案，有效解决了缓慢问题，速度提升了5倍以上。首先我们要知道多线程是指在一个程序中同时执行多个线程，每个线程都是独立的执行流。多线程可以提高程序的并发性和响应性，充分利用多核处理器的优势。线程的创建和启动在Java中，可以通过继承Thread类或实现Runnable接口来创建线程。创建线程后，可以调用start()方法启动线程，使其开始执行。多个线程同时访问共享数据时可能引发竞态条件和数据不一致的问题。为了解决这些问题，可以使用同步机制，如使用synchronized关键字或使用锁对象来实现线程的互斥访问。多个线程之间可能需要进行通信和协调工作。可以使用线程间共享的对象作为通信的媒介，如使用wait()、notify()和notifyAll()方法实现线程的等待和唤醒。线程池是一种管理和复用线程的机制，它可以提高线程的创建和销毁效率，并控制并发线程的数量。Java提供了Executor框架和ThreadPoolExecutor类来实现线程池。在这次的功能优化中使用的就是线程池ExecutorService,具体用法就不做过多介绍了，主要说一下在使用过程中遇到的问题，你可能会遇到线程间事务性的问题，可能需要使用到手动事务控制，主要是TransactionTemplate，可能会遇到如何将数据分配到不同的线程中，可能会遇到执行过程中的事务问题，一般情况下使用@Transactional注解可解决。")])])}),[],!1,null,null,null);n.default=o.exports}}]);